UploadController.cs

using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace UEPFeedback.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UploadController : ControllerBase
    {
        [HttpPost, DisableRequestSizeLimit]
        public async Task<IActionResult> Upload()
        {
            try
            {
                var file = Request.Form.Files[0];

                var folderName = Path.Combine("Resources", "Images");
                var pathToSave = Path.Combine(Directory.GetCurrentDirectory(), folderName);

                if (file.Length > 0)
                {
                    var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                    var fullPath = Path.Combine(pathToSave, fileName);
                    var dbPath = Path.Combine(folderName, fileName);

                    using (var stream = new FileStream(fullPath, FileMode.Create))
                    {
                        file.CopyTo(stream);
                    }

                    return Ok(new { dbPath });
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex}");
            }
        }
    }
}
----------------------------------------------

services.AddDbContext<UEPFeedbackContext>(options =>
                    options.UseSqlServer(Configuration.GetConnectionString("UEPFeedbackContext")));



            services.AddCors(options =>
            {
                options.AddPolicy("CorsPolicy",
                    builder => builder.AllowAnyOrigin()
                    .AllowAnyMethod()
                    .AllowAnyHeader());
            });


            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "UEPFeedback", Version = "v1" });
            });

            services.Configure<FormOptions>(o => {
                o.ValueLengthLimit = int.MaxValue;
                o.MultipartBodyLengthLimit = int.MaxValue;
                o.MemoryBufferThreshold = int.MaxValue;
            });

            services.AddControllers();

--------------------------------------------


  app.UseSwagger();
            app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "UEPFeedback v1"));

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseCors("CorsPolicy");
            app.UseStaticFiles();
            app.UseStaticFiles(new StaticFileOptions()
            {
                FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), @"Resources")),
                RequestPath = new PathString("/Resources")
            });

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

-----------------------------------------------------------
upload.component.ts

import { Component, OnInit, Output, EventEmitter } from '@angular/core';
import { HttpEventType, HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-upload',
  templateUrl: './upload.component.html',
  styleUrls: ['./upload.component.css']
})
export class UploadComponent implements OnInit {
  public progress: number;
  public message: string;
  @Output() public onUploadFinished = new EventEmitter();

  constructor(private http: HttpClient) { }

  ngOnInit() {
  }

  public uploadFile = (files) => {
    if (files.length === 0) {
      return;
    }

    let fileToUpload = <File>files[0];
    const formData = new FormData();
    formData.append('file', fileToUpload, fileToUpload.name);

    this.http.post('https://localhost:44317/api/Upload', formData, {reportProgress: true, observe: 'events'})
      .subscribe(event => {
        console.log(event) //to check dbpath
        if (event.type === HttpEventType.UploadProgress)
          this.progress = Math.round(100 * event.loaded / event.total);
        else if (event.type === HttpEventType.Response) {
          this.message = 'Upload success.';
          this.onUploadFinished.emit(event.body);
        }
      });
  }
}
-----------------------------------
<div class="row" style="margin-bottom:15px;">
    <div class="col-md-3">
      <input type="file" #file placeholder="Choose file" (change)="uploadFile(file.files)" style="display:none;">
      <button type="button" class="btn btn-success" (click)="file.click()">Upload File</button>
    </div>
    <div class="col-md-4">
      <span class="upload" *ngIf="progress > 0">
        {{progress}}%
      </span>
      <span class="upload" *ngIf="message">
        {{message}}
      </span>
    </div>
  </div>
------------------------------------------
.upload{
    font-weight:bold;
    color:#28a745;
    margin-left: 15px;
    line-height: 36px;
}
---------------------------------------------

post.sol.html



<h3 class="text-center p-4" style="width: 400px;">Post Your Solutions here</h3>
<div class="container">
    <div class="row">
        
    </div>
</div>
  
<div [hidden]="submitted" class="text-center border border-light p-5" style="width: 400px;">
    
  <form (ngSubmit)="onSubmit()">
    <div class="card" style="width:25rem">
      <label  for="name">Select Query</label><br/>
      <select  [(ngModel)]=sol.solutionForQueryID name="dd" placeholder="Choose">
          <option value="" disabled>Select Category</option>
          <option *ngFor="let hd of queries" value="{{hd.queryID}}">{{hd.qContent}}</option>
      </select>
     </div>
    <div class="card" style="width:25rem">
      <label for="name">Enter Your Solution Below</label><br/>
      <textarea [(ngModel)]=sol.sContent name="sContent" width="200px" height="200px"></textarea>
    </div>
       <!-- <div class="card" style="width:25rem">
       <img [src]="imageUrl"  style="width:250px;height:200px">
       <input type="file" [(ngModel)]=fileToUpload name="references" accept=".pdf/*,image/*" (change)="handleFileInput($event.target.files)"/>
       </div> -->
       <app-upload (onUploadFinished)="uploadFinished($event)"></app-upload>


    <button  class="btn btn-success" type="submit" >Submit</button>
  </form>
</div>

<div class="text-center p-4" style="width: 400px;">
  <a  routerLink="/fp" mdbBtn color="unique" routerLinkActice="active" >Go to Main Page </a>
</div>



<div [hidden]="!submitted">
  <h4>You submitted successfully!</h4>
  <!-- <button class="btn btn-success" (click)="newEmployee()">Add</button> -->
</div>
--------------------------------------------------------

import { Component, Input, OnInit } from '@angular/core';
import { Router } from '@angular/router';

import { QueryService } from '../Query.Service';
import { Solution } from '../Solution';
import { SolutionService } from '../Solution.Service';

@Component({
  selector: 'app-post-solution',
  templateUrl: './post-solution.component.html',
  styleUrls: ['./post-solution.component.css']
})
export class PostSolutionComponent implements OnInit {

 imageUrl:string="assets/Images/noimg.png";
 fileToUpload:File=null;
  public errormsg;
  queries:any=[];
  loginData:any;
  solution1:any;
  public querid:number;
  public sContent:string;
  public sol:Solution=new Solution();
  public response:{ dbPath: ' ' };
  constructor(private solService:SolutionService,
    private router:Router) { }

  submitted=false;
  
  ngOnInit(): void {   

    this.solService.getQueries()
    .subscribe(data=> this.queries=data,
      error=>this.errormsg=error); 
        // for(const d of (data as any)){
      //   if(d.status=='OPEN'){
      //   this.queries.push({
      //     queryID:d.queryID,   
      //     qContent:d.qContent,
      //   });
      // }
      // }
    // });              
  }
  save() {
    this.sol.references=this.response.dbPath;

    console.log(this.sol);
    this.solService
    .postSolution(this.sol).subscribe(data => {
      console.log(data)
      this.sol = new Solution();
      this.gotoList();
    }, 
    error => console.log(error));
    
  }
  onSubmit() {
    this.submitted = true;
    this.save();    
  }
  gotoList() {
    this.router.navigate(['/viewQuery']);
  }

  handleFileInput(file:FileList){
    this.fileToUpload=file.item(0);

    var reader=new FileReader();
    reader.onload=(event:any)=>{
      this.imageUrl=event.target.result;
    }
    reader.readAsDataURL(this.fileToUpload);
  }
  public uploadFinished(event){
    this.response=event;
    
   
  }
}


